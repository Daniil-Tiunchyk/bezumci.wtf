/*************************************
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 *************************************/
const BASE_URL = "http://185.251.38.70:3000";
let adminTimeOutMs = 1000; // ¬´–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç¬ª
let currentPrecipitation = null; // "snow" –∏–ª–∏ "rain"
let precipitationInterval = null;

/*************************************
 * –ú–æ–¥–∞–ª–∫–∏
 *************************************/
function openModal(id) {
  const modal = document.getElementById(id);
  if (modal) {
    modal.style.display = "block";
  }
}

function closeModal(id) {
  const modal = document.getElementById(id);
  if (modal) {
    modal.style.display = "none";
  }
}

function closeIfClickedOutside(event, modalId) {
  const modal = document.getElementById(modalId);
  if (!modal) return;
  // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–∞–º —Ñ–æ–Ω (modal), –∞ –Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
  if (event.target === modal) {
    modal.style.display = "none";
  }
}

function setText(id, text) {
  const el = document.getElementById(id);
  if (el) el.textContent = text;
}

/*************************************
 * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
 *************************************/
function positionSidebarRandomly() {
  const sidebar = document.getElementById("sidebar");
  if (!sidebar) return;

  const positions = ["top", "bottom", "left", "right"];
  const randomPos = positions[Math.floor(Math.random() * positions.length)];

  sidebar.style.top = "";
  sidebar.style.bottom = "";
  sidebar.style.left = "";
  sidebar.style.right = "";
  sidebar.style.transform = "";

  switch (randomPos) {
    case "top":
      sidebar.style.top = "0px";
      sidebar.style.left = "50%";
      sidebar.style.transform = "translateX(-50%)";
      break;
    case "bottom":
      sidebar.style.bottom = "0px";
      sidebar.style.left = "50%";
      sidebar.style.transform = "translateX(-50%)";
      break;
    case "left":
      sidebar.style.left = "0px";
      sidebar.style.top = "50%";
      sidebar.style.transform = "translateY(-50%)";
      break;
    case "right":
      sidebar.style.right = "0px";
      sidebar.style.top = "50%";
      sidebar.style.transform = "translateY(-50%)";
      break;
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Å—ã–ª–æ–∫
  const ul = sidebar.querySelector("ul");
  for (let i = ul.children.length; i >= 0; i--) {
    ul.appendChild(ul.children[(Math.random() * i) | 0]);
  }
}

/*************************************
 * –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 *************************************/
function initializeLandingPage() {
  positionSidebarRandomly();
  startSnow(); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–¥—ë—Ç —Å–Ω–µ–≥
  openModal("modal-ozonAd"); // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É Ozon —Å—Ä–∞–∑—É

  // –£–±–µ–≥–∞—é—â–∏–π –∫—Ä–µ—Å—Ç–∏–∫
  const closeAdBtn = document.getElementById("closeAdBtn");
  if (closeAdBtn) {
    closeAdBtn.addEventListener("mouseover", moveCloseAdBtnRandom);
  }
}

function initializeLoginPage() {
  positionSidebarRandomly();
  startSnow();
}

function initializeRegisterPage() {
  positionSidebarRandomly();
  startSnow();
}

function initializeWeatherPage() {
  positionSidebarRandomly();
  startSnow();

  // –ü—Ä–æ–≤–µ—Ä–∏–º "isLoggedIn" –≤ localStorage (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  const isLoggedIn = localStorage.getItem("isLoggedIn");
  if (isLoggedIn !== "true") {
    openModal("modal-auth-required");
    setTimeout(() => {
      window.location.href = "login.html";
    }, 2000);
  }
}

/*************************************
 * –°–Ω–µ–≥ / –î–æ–∂–¥—å
 *************************************/
function togglePrecipitation() {
  if (!currentPrecipitation) {
    startSnow();
  } else if (currentPrecipitation === "snow") {
    stopPrecipitation();
    startRain();
  } else if (currentPrecipitation === "rain") {
    stopPrecipitation();
    startSnow();
  }
}

function startSnow() {
  currentPrecipitation = "snow";
  spawnPrecipitation("‚ùÑ");
}

function startRain() {
  currentPrecipitation = "rain";
  spawnPrecipitation("üíß");
}

function stopPrecipitation() {
  if (precipitationInterval) {
    clearInterval(precipitationInterval);
    precipitationInterval = null;
  }
  const container = document.getElementById("precipitationContainer");
  if (container) container.innerHTML = "";
  currentPrecipitation = null;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–∞–¥–∫–æ–≤ (—Å–Ω–µ–≥–∞/–¥–æ–∂–¥—è) ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è
function spawnPrecipitation(symbol) {
  const container = document.getElementById("precipitationContainer");
  if (!container) return;

  precipitationInterval = setInterval(() => {
    const elem = document.createElement("div");
    elem.textContent = symbol;
    elem.style.position = "absolute";
    elem.style.left = Math.random() * 100 + "%";
    elem.style.top = "-5%";
    elem.style.fontSize = "1.2rem";
    elem.style.opacity = 0.9;

    container.appendChild(elem);

    let fallSpeed = 5 + Math.random() * 4;
    let currentTop = -5;

    const fall = setInterval(() => {
      if (currentTop > 105) {
        clearInterval(fall);
        container.removeChild(elem);
      } else {
        currentTop += fallSpeed;
        elem.style.top = currentTop + "%";
      }
    }, 50);
  }, 100);
}

/*************************************
 * –£–±–µ–≥–∞—é—â–∏–π –∫—Ä–µ—Å—Ç–∏–∫ –≤ —Ä–µ–∫–ª–∞–º–µ Ozon
 *************************************/
function moveCloseAdBtnRandom(event) {
  const btn = event.target;
  const parent = btn.parentElement; // .ad-content
  if (!parent) return;

  const rect = parent.getBoundingClientRect();
  const maxLeft = rect.width - 30;
  const maxTop = rect.height - 30;

  const randomLeft = Math.floor(Math.random() * maxLeft);
  const randomTop = Math.floor(Math.random() * maxTop);

  btn.style.position = "absolute";
  btn.style.left = randomLeft + "px";
  btn.style.top = randomTop + "px";
}

/*************************************
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ '*','x','u','–π', –º–∞–∫—Å 5)
 *************************************/
function checkPasswordValidity(inputEl) {
  const allowedChars = ["*", "x", "u", "–π"];
  for (let i = 0; i < inputEl.value.length; i++) {
    const ch = inputEl.value[i];
    if (!allowedChars.includes(ch)) {
      inputEl.value = inputEl.value.slice(0, -1);
      alert(`–û–®–ò–ë–ö–ê!
–°–∏–º–≤–æ–ª "${ch}" –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.
–î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${allowedChars.join(", ")}.
–ú–∞–∫—Å. –¥–ª–∏–Ω–∞: 5.`);
      break;
    }
  }
}

/*************************************
 * –û—á–µ—Ä–µ–¥—å (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç—Å—á—ë—Ç)
 *************************************/
function startQueueCountdown(peopleCount, onFinish) {
  // 4.5 —Å–µ–∫ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
  let totalMs = peopleCount * 4500;

  openModal("modal-queue");
  updateQueueText(peopleCount, totalMs);

  const intervalId = setInterval(() => {
    totalMs -= 1000;
    if (totalMs <= 0) {
      clearInterval(intervalId);
      closeModal("modal-queue");
      onFinish(); // –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å -> –¥–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    } else {
      updateQueueText(peopleCount, totalMs);
    }
  }, 1000);
}

function updateQueueText(peopleCount, msLeft) {
  const sec = Math.ceil(msLeft / 1000);
  setText(
    "queueText",
    `–ü–µ—Ä–µ–¥ –≤–∞–º–∏ ${peopleCount} —á–µ–ª–æ–≤–µ–∫.\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: ${sec} —Å–µ–∫—É–Ω–¥.`
  );
}

/*************************************
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (GET /aus/voiti)
 *************************************/
function attemptLogin() {
  const email = document.getElementById("loginEmail").value.trim();
  const password = document.getElementById("loginPassword").value.trim();

  // –ó–∞–ø—É—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å (1..5 —á–µ–ª–æ–≤–µ–∫)
  const peopleInQueue = Math.floor(Math.random() * 5) + 1;
  startQueueCountdown(peopleInQueue, () => {
    // –ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–∏ - adminTimeOutMs –∑–∞–¥–µ—Ä–∂–∫–∞
    setTimeout(() => {
      fetch(
        `${BASE_URL}/aus/voiti?email=${encodeURIComponent(
          email
        )}&password=${encodeURIComponent(password)}`
      )
        .then(async (res) => {
          if (!res.ok) {
            // –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∫–∏–Ω—É—Ç—å 401 –∏–ª–∏ –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É
            const errText = await res.text();
            throw new Error(errText);
          }
          return res.json();
        })
        .then((data) => {
          // –£—Å–ø–µ—Ö: —Å—Ç–∞–≤–∏–º localStorage isLoggedIn
          localStorage.setItem("isLoggedIn", "true");
          setText(
            "loginResultText",
            `–£—Å–ø–µ—à–Ω–æ: ${data.message} (userId=${data.userId})`
          );
          openModal("modal-login-result");
        })
        .catch((err) => {
          // –û—à–∏–±–∫–∞
          setText("loginResultText", `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${err.message}`);
          openModal("modal-login-result");
        });
    }, adminTimeOutMs);
  });
}

/*************************************
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (GET /aus/zaregastrirovatsya)
 *************************************/
function attemptRegister() {
  const email = document.getElementById("regEmail").value.trim();
  const password = document.getElementById("regPassword").value.trim();

  const peopleInQueue = Math.floor(Math.random() * 5) + 1;
  startQueueCountdown(peopleInQueue, () => {
    setTimeout(() => {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      fetch(
        `${BASE_URL}/aus/zaregastrirovatsya?email=${encodeURIComponent(
          email
        )}&password=${encodeURIComponent(password)}`
      )
        .then(async (res) => {
          if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText);
          }
          return res.json();
        })
        .then((data) => {
          setText(
            "registerResultText",
            `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ID=${data.id}, Email=${data.email}`
          );
          openModal("modal-register-result");
          // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫ -> –Ω–∞ –ª–æ–≥–∏–Ω
          setTimeout(() => {
            closeModal("modal-register-result");
            window.location.href = "login.html";
          }, 2000);
        })
        .catch((err) => {
          setText("registerResultText", `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${err.message}`);
          openModal("modal-register-result");
        });
    }, adminTimeOutMs);
  });
}

/*************************************
 * –ü–æ–≥–æ–¥–∞ (GET /pogoda/moya-pogoda)
 *************************************/
function fetchWeatherData() {
  const weatherTextEl = document.getElementById("weatherDataText");
  if (weatherTextEl) weatherTextEl.textContent = "–ó–∞–≥—Ä—É–∂–∞–µ–º...";

  fetch(`${BASE_URL}/pogoda/moya-pogoda`)
    .then(async (res) => {
      if (!res.ok) {
        const err = await res.text();
        throw new Error(err);
      }
      return res.json();
    })
    .then((data) => {
      weatherTextEl.textContent = JSON.stringify(data, null, 2);
    })
    .catch((err) => {
      weatherTextEl.textContent = "–û—à–∏–±–∫–∞: " + err.message;
    });
}

/*************************************
 * CRUD –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø–æ–ª–Ω–æ—Å—Ç—å—é)
 *************************************/
function loadAllUsers() {
  fetch(`${BASE_URL}/polzovateli/vse-dannie`)
    .then((res) => res.json())
    .then((users) => {
      const usersEl = document.getElementById("usersTable");
      usersEl.textContent = JSON.stringify(users, null, 2);
    })
    .catch((err) => {
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + err.message);
    });
}

function addUser() {
  const email = document.getElementById("addUserEmail").value.trim();
  const password = document.getElementById("addUserPassword").value.trim();
  if (!email || !password) {
    alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ password");
    return;
  }

  // POST /polzovateli/dobavit?email=...&password=...
  fetch(
    `${BASE_URL}/polzovateli/dobavit?email=${encodeURIComponent(
      email
    )}&password=${encodeURIComponent(password)}`,
    {
      method: "POST",
    }
  )
    .then(async (res) => {
      if (!res.ok) {
        throw new Error(await res.text());
      }
      return res.json();
    })
    .then((data) => {
      alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${JSON.stringify(data)}`);
      loadAllUsers(); // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
    })
    .catch((err) => {
      alert("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " + err.message);
    });
}

function updateUser() {
  const id = document.getElementById("updateUserId").value.trim();
  const email = document.getElementById("updateUserEmail").value.trim();
  const password = document.getElementById("updateUserPassword").value.trim();
  if (!id || !email || !password) {
    alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ id, email, password");
    return;
  }

  // PUT /polzovateli/izmenit?id=...&email=...&password=...
  fetch(
    `${BASE_URL}/polzovateli/izmenit?id=${id}&email=${encodeURIComponent(
      email
    )}&password=${encodeURIComponent(password)}`,
    {
      method: "PUT",
    }
  )
    .then(async (res) => {
      if (!res.ok) {
        throw new Error(await res.text());
      }
      return res.json();
    })
    .then((data) => {
      alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—ë–Ω: ${JSON.stringify(data)}`);
      loadAllUsers();
    })
    .catch((err) => {
      alert("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: " + err.message);
    });
}

function deleteUser() {
  const id = document.getElementById("deleteUserId").value.trim();
  if (!id) {
    alert("–£–∫–∞–∂–∏—Ç–µ ID");
    return;
  }

  // DELETE /polzovateli/udalit?id=...
  fetch(`${BASE_URL}/polzovateli/udalit?id=${id}`, {
    method: "DELETE",
  })
    .then(async (res) => {
      if (!res.ok) {
        throw new Error(await res.text());
      }
      return res.json();
    })
    .then((data) => {
      alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω: ${JSON.stringify(data)}`);
      loadAllUsers();
    })
    .catch((err) => {
      alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + err.message);
    });
}

/*************************************
 * –í—ã–≥—Ä—É–∑–∫–∞ –ë–î (txt) - GET /exploiti/dostat-vsu-bazu-dannih
 *************************************/
function downloadDbTxt() {
  fetch(`${BASE_URL}/exploiti/dostat-vsu-bazu-dannih`)
    .then(async (res) => {
      if (!res.ok) {
        throw new Error(await res.text());
      }
      return res.text(); // –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, —Ö–æ—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
    })
    .then((textData) => {
      // –°–æ–∑–¥–∞–¥–∏–º Blob
      const blob = new Blob([textData], { type: "text/plain" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "database_dump.txt";
      link.click();
      URL.revokeObjectURL(link.href);
    })
    .catch((err) => {
      alert("–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ë–î: " + err.message);
    });
}
